"""All input for the `acceptInvitationToOrganization` mutation."""
input AcceptInvitationToOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  code: String
  invitationId: UUID!
}

"""The output of our `acceptInvitationToOrganization` mutation."""
type AcceptInvitationToOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """Not included in the specified list."""
  notIn: [Boolean!]
}

"""All input for the `changePassword` mutation."""
input ChangePasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  newPassword: String!
  oldPassword: String!
}

"""The output of our `changePassword` mutation."""
type ChangePasswordPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `confirmAccountDeletion` mutation."""
input ConfirmAccountDeletionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  token: String!
}

"""The output of our `confirmAccountDeletion` mutation."""
type ConfirmAccountDeletionPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Consultation implements Node {
  createdAt: Datetime!
  id: UUID!

  """Reads and enables pagination through a set of `Message`."""
  messages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessagesConnection!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Organization` that is related to this `Consultation`."""
  organization: Organization
  organizationId: UUID!

  """
  Reads and enables pagination through a set of `ConsultationParticipant`.
  """
  participations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConsultationParticipantCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConsultationParticipantFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ConsultationParticipant`."""
    orderBy: [ConsultationParticipantsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConsultationParticipantsConnection!
  updatedAt: Datetime!
}

"""
A condition to be used against `Consultation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ConsultationCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: UUID

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Consultation` object types. All fields are combined with a logical ‘and.’
"""
input ConsultationFilter {
  """Checks for all expressions in this list."""
  and: [ConsultationFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `messages` relation."""
  messages: ConsultationToManyMessageFilter

  """Some related `messages` exist."""
  messagesExist: Boolean

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: ConsultationFilter

  """Checks for any expressions in this list."""
  or: [ConsultationFilter!]

  """Filter by the object’s `organization` relation."""
  organization: OrganizationFilter

  """Filter by the object’s `organizationId` field."""
  organizationId: UUIDFilter

  """Filter by the object’s `participations` relation."""
  participations: ConsultationToManyConsultationParticipantFilter

  """Some related `participations` exist."""
  participationsExist: Boolean

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `Consultation`"""
input ConsultationInput {
  id: UUID
  name: String!
}

type ConsultationParticipant implements Node {
  "\nThe consultation this participant is part of.\n"
  consultation: Consultation
  consultationId: UUID!
  createdAt: Datetime!
  id: UUID!
  isClient: Boolean!
  isCounselor: Boolean!
  isSupervisor: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  sysPeriod: DatetimeRange!
  updatedAt: Datetime!

  """
  Reads a single `User` that is related to this `ConsultationParticipant`.
  """
  user: User
  userId: UUID!
}

"""
A condition to be used against `ConsultationParticipant` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ConsultationParticipantCondition {
  """Checks for equality with the object’s `consultationId` field."""
  consultationId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isClient` field."""
  isClient: Boolean

  """Checks for equality with the object’s `isCounselor` field."""
  isCounselor: Boolean

  """Checks for equality with the object’s `isSupervisor` field."""
  isSupervisor: Boolean

  """Checks for equality with the object’s `sysPeriod` field."""
  sysPeriod: DatetimeRangeInput

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""
A filter to be used against `ConsultationParticipant` object types. All fields are combined with a logical ‘and.’
"""
input ConsultationParticipantFilter {
  """Checks for all expressions in this list."""
  and: [ConsultationParticipantFilter!]

  """Filter by the object’s `consultation` relation."""
  consultation: ConsultationFilter

  """Filter by the object’s `consultationId` field."""
  consultationId: UUIDFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `isClient` field."""
  isClient: BooleanFilter

  """Filter by the object’s `isCounselor` field."""
  isCounselor: BooleanFilter

  """Filter by the object’s `isSupervisor` field."""
  isSupervisor: BooleanFilter

  """Negates the expression."""
  not: ConsultationParticipantFilter

  """Checks for any expressions in this list."""
  or: [ConsultationParticipantFilter!]

  """Filter by the object’s `sysPeriod` field."""
  sysPeriod: DatetimeRangeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter
}

"""An input for mutations affecting `ConsultationParticipant`"""
input ConsultationParticipantInput {
  consultationId: UUID!
  id: UUID
  isClient: Boolean
  isCounselor: Boolean
  isSupervisor: Boolean
  userId: UUID
}

"""
Represents an update to a `ConsultationParticipant`. Fields that are set will be updated.
"""
input ConsultationParticipantPatch {
  isClient: Boolean
  isCounselor: Boolean
  isSupervisor: Boolean
}

"""A connection to a list of `ConsultationParticipant` values."""
type ConsultationParticipantsConnection {
  """
  A list of edges which contains the `ConsultationParticipant` and cursor to aid in pagination.
  """
  edges: [ConsultationParticipantsEdge!]!

  """A list of `ConsultationParticipant` objects."""
  nodes: [ConsultationParticipant!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ConsultationParticipant` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ConsultationParticipant` edge in the connection."""
type ConsultationParticipantsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ConsultationParticipant` at the end of the edge."""
  node: ConsultationParticipant!
}

"""Methods to use when ordering `ConsultationParticipant`."""
enum ConsultationParticipantsOrderBy {
  CONSULTATION_ID_ASC
  CONSULTATION_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  IS_CLIENT_ASC
  IS_CLIENT_DESC
  IS_COUNSELOR_ASC
  IS_COUNSELOR_DESC
  IS_SUPERVISOR_ASC
  IS_SUPERVISOR_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""
Represents an update to a `Consultation`. Fields that are set will be updated.
"""
input ConsultationPatch {
  name: String
}

"""
A filter to be used against many `ConsultationParticipant` object types. All fields are combined with a logical ‘and.’
"""
input ConsultationToManyConsultationParticipantFilter {
  """
  Every related `ConsultationParticipant` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ConsultationParticipantFilter

  """
  No related `ConsultationParticipant` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ConsultationParticipantFilter

  """
  Some related `ConsultationParticipant` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ConsultationParticipantFilter
}

"""
A filter to be used against many `Message` object types. All fields are combined with a logical ‘and.’
"""
input ConsultationToManyMessageFilter {
  """
  Every related `Message` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MessageFilter

  """
  No related `Message` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MessageFilter

  """
  Some related `Message` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MessageFilter
}

"""A connection to a list of `Consultation` values."""
type ConsultationsConnection {
  """
  A list of edges which contains the `Consultation` and cursor to aid in pagination.
  """
  edges: [ConsultationsEdge!]!

  """A list of `Consultation` objects."""
  nodes: [Consultation!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Consultation` you could get from the connection."""
  totalCount: Int!
}

"""A `Consultation` edge in the connection."""
type ConsultationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Consultation` at the end of the edge."""
  node: Consultation!
}

"""Methods to use when ordering `Consultation`."""
enum ConsultationsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""All input for the create `Consultation` mutation."""
input CreateConsultationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Consultation` to be created by this mutation."""
  consultation: ConsultationInput!
}

"""All input for the create `ConsultationParticipant` mutation."""
input CreateConsultationParticipantInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ConsultationParticipant` to be created by this mutation."""
  consultationParticipant: ConsultationParticipantInput!
}

"""The output of our create `ConsultationParticipant` mutation."""
type CreateConsultationParticipantPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  "\nThe consultation this participant is part of.\n"
  consultation: Consultation

  """The `ConsultationParticipant` that was created by this mutation."""
  consultationParticipant: ConsultationParticipant

  """An edge for our `ConsultationParticipant`. May be used by Relay 1."""
  consultationParticipantEdge(
    """The method to use when ordering `ConsultationParticipant`."""
    orderBy: [ConsultationParticipantsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ConsultationParticipantsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `ConsultationParticipant`.
  """
  user: User
}

"""The output of our create `Consultation` mutation."""
type CreateConsultationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Consultation` that was created by this mutation."""
  consultation: Consultation

  """An edge for our `Consultation`. May be used by Relay 1."""
  consultationEdge(
    """The method to use when ordering `Consultation`."""
    orderBy: [ConsultationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ConsultationsEdge

  """Reads a single `Organization` that is related to this `Consultation`."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `File` mutation."""
input CreateFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `File` to be created by this mutation."""
  file: FileInput!
}

"""The output of our create `File` mutation."""
type CreateFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `File` that was created by this mutation."""
  file: File

  """An edge for our `File`. May be used by Relay 1."""
  fileEdge(
    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): FilesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `File`."""
  uploader: User
}

"""All input for the create `Folder` mutation."""
input CreateFolderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Folder` to be created by this mutation."""
  folder: FolderInput!
}

"""The output of our create `Folder` mutation."""
type CreateFolderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Folder` that was created by this mutation."""
  folder: Folder

  """An edge for our `Folder`. May be used by Relay 1."""
  folderEdge(
    """The method to use when ordering `Folder`."""
    orderBy: [FoldersOrderBy!]! = [PRIMARY_KEY_ASC]
  ): FoldersEdge

  """Reads a single `Organization` that is related to this `Folder`."""
  organization: Organization

  """Reads a single `Folder` that is related to this `Folder`."""
  parent: Folder

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createOrganization` mutation."""
input CreateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
  slug: String!
}

"""The output of our `createOrganization` mutation."""
type CreateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `PdfFile` mutation."""
input CreatePdfFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PdfFile` to be created by this mutation."""
  pdfFile: PdfFileInput!
}

"""The output of our create `PdfFile` mutation."""
type CreatePdfFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `File` that is related to this `PdfFile`."""
  file: File

  """The `PdfFile` that was created by this mutation."""
  pdfFile: PdfFile

  """An edge for our `PdfFile`. May be used by Relay 1."""
  pdfFileEdge(
    """The method to use when ordering `PdfFile`."""
    orderBy: [PdfFilesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PdfFilesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `File` that is related to this `PdfFile`."""
  thumbnail: File
}

"""All input for the create `UserEmail` mutation."""
input CreateUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserEmail` to be created by this mutation."""
  userEmail: UserEmailInput!
}

"""The output of our create `UserEmail` mutation."""
type CreateUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """The `UserEmail` that was created by this mutation."""
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

"""A connection to a list of `UUID` values."""
type CurrentUserConsultationIdsConnection {
  """
  A list of edges which contains the `UUID` and cursor to aid in pagination.
  """
  edges: [CurrentUserConsultationIdsEdge]!

  """A list of `UUID` objects."""
  nodes: [UUID]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UUID` you could get from the connection."""
  totalCount: Int!
}

"""A `UUID` edge in the connection."""
type CurrentUserConsultationIdsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UUID` at the end of the edge."""
  node: UUID
}

"""A connection to a list of `UUID` values."""
type CurrentUserInvitedOrganizationIdsConnection {
  """
  A list of edges which contains the `UUID` and cursor to aid in pagination.
  """
  edges: [CurrentUserInvitedOrganizationIdsEdge]!

  """A list of `UUID` objects."""
  nodes: [UUID]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UUID` you could get from the connection."""
  totalCount: Int!
}

"""A `UUID` edge in the connection."""
type CurrentUserInvitedOrganizationIdsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UUID` at the end of the edge."""
  node: UUID
}

"""A connection to a list of `UUID` values."""
type CurrentUserMemberOrganizationIdsConnection {
  """
  A list of edges which contains the `UUID` and cursor to aid in pagination.
  """
  edges: [CurrentUserMemberOrganizationIdsEdge]!

  """A list of `UUID` objects."""
  nodes: [UUID]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UUID` you could get from the connection."""
  totalCount: Int!
}

"""A `UUID` edge in the connection."""
type CurrentUserMemberOrganizationIdsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UUID` at the end of the edge."""
  node: UUID
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) and, if it has a timezone, [RFC
3339](https://datatracker.ietf.org/doc/html/rfc3339) standards. Input values
that do not conform to both ISO 8601 and RFC 3339 may be coerced, which may lead
to unexpected results.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value."""
  equalTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """Not included in the specified list."""
  notIn: [Datetime!]
}

"""A range of `Datetime`."""
type DatetimeRange {
  """The ending bound of our range."""
  end: DatetimeRangeBound

  """The starting bound of our range."""
  start: DatetimeRangeBound
}

"""
The value at one end of a range. A range can either include this value, or not.
"""
type DatetimeRangeBound {
  """Whether or not the value of this bound is included in the range."""
  inclusive: Boolean!

  """The value at one end of our range."""
  value: Datetime!
}

"""
The value at one end of a range. A range can either include this value, or not.
"""
input DatetimeRangeBoundInput {
  """Whether or not the value of this bound is included in the range."""
  inclusive: Boolean!

  """The value at one end of our range."""
  value: Datetime!
}

"""
A filter to be used against DatetimeRange fields. All fields are combined with a logical ‘and.’
"""
input DatetimeRangeFilter {
  """Adjacent to the specified range."""
  adjacentTo: DatetimeRangeInput

  """Contained by the specified range."""
  containedBy: DatetimeRangeInput

  """Contains the specified range."""
  contains: DatetimeRangeInput

  """Contains the specified value."""
  containsElement: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: DatetimeRangeInput

  """Equal to the specified value."""
  equalTo: DatetimeRangeInput

  """Greater than the specified value."""
  greaterThan: DatetimeRangeInput

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: DatetimeRangeInput

  """Included in the specified list."""
  in: [DatetimeRangeInput!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: DatetimeRangeInput

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: DatetimeRangeInput

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: DatetimeRangeInput

  """Not equal to the specified value."""
  notEqualTo: DatetimeRangeInput

  """Does not extend left of the specified range."""
  notExtendsLeftOf: DatetimeRangeInput

  """Does not extend right of the specified range."""
  notExtendsRightOf: DatetimeRangeInput

  """Not included in the specified list."""
  notIn: [DatetimeRangeInput!]

  """Overlaps the specified range."""
  overlaps: DatetimeRangeInput

  """Strictly left of the specified range."""
  strictlyLeftOf: DatetimeRangeInput

  """Strictly right of the specified range."""
  strictlyRightOf: DatetimeRangeInput
}

"""A range of `Datetime`."""
input DatetimeRangeInput {
  """The ending bound of our range."""
  end: DatetimeRangeBoundInput

  """The starting bound of our range."""
  start: DatetimeRangeBoundInput
}

"""All input for the `deleteConsultationByNodeId` mutation."""
input DeleteConsultationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Consultation` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteConsultation` mutation."""
input DeleteConsultationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""
All input for the `deleteConsultationParticipantByConsultationIdAndUserId` mutation.
"""
input DeleteConsultationParticipantByConsultationIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  consultationId: UUID!
  userId: UUID!
}

"""All input for the `deleteConsultationParticipantByNodeId` mutation."""
input DeleteConsultationParticipantByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ConsultationParticipant` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteConsultationParticipant` mutation."""
input DeleteConsultationParticipantInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `ConsultationParticipant` mutation."""
type DeleteConsultationParticipantPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  "\nThe consultation this participant is part of.\n"
  consultation: Consultation

  """The `ConsultationParticipant` that was deleted by this mutation."""
  consultationParticipant: ConsultationParticipant

  """An edge for our `ConsultationParticipant`. May be used by Relay 1."""
  consultationParticipantEdge(
    """The method to use when ordering `ConsultationParticipant`."""
    orderBy: [ConsultationParticipantsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ConsultationParticipantsEdge
  deletedConsultationParticipantNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `ConsultationParticipant`.
  """
  user: User
}

"""The output of our delete `Consultation` mutation."""
type DeleteConsultationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Consultation` that was deleted by this mutation."""
  consultation: Consultation

  """An edge for our `Consultation`. May be used by Relay 1."""
  consultationEdge(
    """The method to use when ordering `Consultation`."""
    orderBy: [ConsultationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ConsultationsEdge
  deletedConsultationNodeId: ID

  """Reads a single `Organization` that is related to this `Consultation`."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFileByNodeId` mutation."""
input DeleteFileByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `File` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFile` mutation."""
input DeleteFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `File` mutation."""
type DeleteFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFileNodeId: ID

  """The `File` that was deleted by this mutation."""
  file: File

  """An edge for our `File`. May be used by Relay 1."""
  fileEdge(
    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): FilesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `File`."""
  uploader: User
}

"""All input for the `deleteFolderByNodeId` mutation."""
input DeleteFolderByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Folder` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFolder` mutation."""
input DeleteFolderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Folder` mutation."""
type DeleteFolderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFolderNodeId: ID

  """The `Folder` that was deleted by this mutation."""
  folder: Folder

  """An edge for our `Folder`. May be used by Relay 1."""
  folderEdge(
    """The method to use when ordering `Folder`."""
    orderBy: [FoldersOrderBy!]! = [PRIMARY_KEY_ASC]
  ): FoldersEdge

  """Reads a single `Organization` that is related to this `Folder`."""
  organization: Organization

  """Reads a single `Folder` that is related to this `Folder`."""
  parent: Folder

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteOrganization` mutation."""
input DeleteOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
}

"""The output of our `deleteOrganization` mutation."""
type DeleteOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePdfFileByNodeId` mutation."""
input DeletePdfFileByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PdfFile` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePdfFile` mutation."""
input DeletePdfFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `PdfFile` mutation."""
type DeletePdfFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPdfFileNodeId: ID

  """Reads a single `File` that is related to this `PdfFile`."""
  file: File

  """The `PdfFile` that was deleted by this mutation."""
  pdfFile: PdfFile

  """An edge for our `PdfFile`. May be used by Relay 1."""
  pdfFileEdge(
    """The method to use when ordering `PdfFile`."""
    orderBy: [PdfFilesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PdfFilesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `File` that is related to this `PdfFile`."""
  thumbnail: File
}

"""All input for the `deleteUserAuthenticationByNodeId` mutation."""
input DeleteUserAuthenticationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserAuthentication` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteUserAuthenticationByServiceAndIdentifier` mutation.
"""
input DeleteUserAuthenticationByServiceAndIdentifierInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """A unique identifier for the user within the login service."""
  identifier: String!

  """The login service used, e.g. `twitter` or `github`."""
  service: String!
}

"""All input for the `deleteUserAuthentication` mutation."""
input DeleteUserAuthenticationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `UserAuthentication` mutation."""
type DeleteUserAuthenticationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserAuthenticationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User

  """The `UserAuthentication` that was deleted by this mutation."""
  userAuthentication: UserAuthentication

  """An edge for our `UserAuthentication`. May be used by Relay 1."""
  userAuthenticationEdge(
    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UserAuthenticationsEdge
}

"""All input for the `deleteUserEmailByNodeId` mutation."""
input DeleteUserEmailByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserEmail` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserEmailByUserIdAndEmail` mutation."""
input DeleteUserEmailByUserIdAndEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The users email address, in `a@b.c` format."""
  email: String!
  userId: UUID!
}

"""All input for the `deleteUserEmail` mutation."""
input DeleteUserEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `UserEmail` mutation."""
type DeleteUserEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserEmailNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User

  """The `UserEmail` that was deleted by this mutation."""
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

type File implements Node {
  createdAt: Datetime!
  filename: String
  id: UUID!
  mimeType: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  pathOnStorage: String

  """Reads a single `PdfFile` that is related to this `File`."""
  pdfFile: PdfFile

  """Reads and enables pagination through a set of `PdfFile`."""
  pdfFilesByThumbnailId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PdfFileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PdfFileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PdfFile`."""
    orderBy: [PdfFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PdfFilesConnection!
  sha256: String
  totalBytes: Int
  updatedAt: Datetime!
  uploadedBytes: Int

  """Reads a single `User` that is related to this `File`."""
  uploader: User
  uploaderId: UUID
}

"""
A condition to be used against `File` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FileCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `filename` field."""
  filename: String

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `mimeType` field."""
  mimeType: String

  """Checks for equality with the object’s `pathOnStorage` field."""
  pathOnStorage: String

  """Checks for equality with the object’s `sha256` field."""
  sha256: String

  """Checks for equality with the object’s `totalBytes` field."""
  totalBytes: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `uploadedBytes` field."""
  uploadedBytes: Int

  """Checks for equality with the object’s `uploaderId` field."""
  uploaderId: UUID
}

"""
A filter to be used against `File` object types. All fields are combined with a logical ‘and.’
"""
input FileFilter {
  """Checks for all expressions in this list."""
  and: [FileFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `filename` field."""
  filename: StringFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `mimeType` field."""
  mimeType: StringFilter

  """Negates the expression."""
  not: FileFilter

  """Checks for any expressions in this list."""
  or: [FileFilter!]

  """Filter by the object’s `pathOnStorage` field."""
  pathOnStorage: StringFilter

  """Filter by the object’s `pdfFile` relation."""
  pdfFile: PdfFileFilter

  """A related `pdfFile` exists."""
  pdfFileExists: Boolean

  """Filter by the object’s `pdfFilesByThumbnailId` relation."""
  pdfFilesByThumbnailId: FileToManyPdfFileFilter

  """Some related `pdfFilesByThumbnailId` exist."""
  pdfFilesByThumbnailIdExist: Boolean

  """Filter by the object’s `sha256` field."""
  sha256: StringFilter

  """Filter by the object’s `totalBytes` field."""
  totalBytes: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `uploadedBytes` field."""
  uploadedBytes: IntFilter

  """Filter by the object’s `uploader` relation."""
  uploader: UserFilter

  """A related `uploader` exists."""
  uploaderExists: Boolean

  """Filter by the object’s `uploaderId` field."""
  uploaderId: UUIDFilter
}

"""An input for mutations affecting `File`"""
input FileInput {
  filename: String
  id: UUID
  mimeType: String
  totalBytes: Int
  uploadedBytes: Int
  uploaderId: UUID
}

"""Represents an update to a `File`. Fields that are set will be updated."""
input FilePatch {
  filename: String
  id: UUID
  mimeType: String
  totalBytes: Int
  uploadedBytes: Int
}

"""
A filter to be used against many `PdfFile` object types. All fields are combined with a logical ‘and.’
"""
input FileToManyPdfFileFilter {
  """
  Every related `PdfFile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PdfFileFilter

  """
  No related `PdfFile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PdfFileFilter

  """
  Some related `PdfFile` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PdfFileFilter
}

"""A connection to a list of `File` values."""
type FilesConnection {
  """
  A list of edges which contains the `File` and cursor to aid in pagination.
  """
  edges: [FilesEdge!]!

  """A list of `File` objects."""
  nodes: [File!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `File` you could get from the connection."""
  totalCount: Int!
}

"""A `File` edge in the connection."""
type FilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `File` at the end of the edge."""
  node: File!
}

"""Methods to use when ordering `File`."""
enum FilesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  FILENAME_ASC
  FILENAME_DESC
  ID_ASC
  ID_DESC
  MIME_TYPE_ASC
  MIME_TYPE_DESC
  NATURAL
  PATH_ON_STORAGE_ASC
  PATH_ON_STORAGE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SHA256_ASC
  SHA256_DESC
  TOTAL_BYTES_ASC
  TOTAL_BYTES_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPLOADED_BYTES_ASC
  UPLOADED_BYTES_DESC
  UPLOADER_ID_ASC
  UPLOADER_ID_DESC
}

type Folder implements Node {
  """Reads and enables pagination through a set of `Folder`."""
  ancestors(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FolderFilter

    """Only read the first `n` values of the set."""
    first: Int
    includeSelf: Boolean

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): FoldersConnection!

  """Reads and enables pagination through a set of `Folder`."""
  childFolders(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FolderCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FolderFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Folder`."""
    orderBy: [FoldersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FoldersConnection!
  createdAt: Datetime!
  id: UUID!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Organization` that is related to this `Folder`."""
  organization: Organization
  organizationId: UUID!

  """Reads a single `Folder` that is related to this `Folder`."""
  parent: Folder
  parentId: UUID

  """Reads and enables pagination through a set of `Folder`."""
  siblings(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FolderFilter

    """Only read the first `n` values of the set."""
    first: Int
    includeSelf: Boolean

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): FoldersConnection!
  updatedAt: Datetime!
}

"""
A condition to be used against `Folder` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FolderCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: UUID

  """Checks for equality with the object’s `parentId` field."""
  parentId: UUID

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Folder` object types. All fields are combined with a logical ‘and.’
"""
input FolderFilter {
  """Checks for all expressions in this list."""
  and: [FolderFilter!]

  """Filter by the object’s `childFolders` relation."""
  childFolders: FolderToManyFolderFilter

  """Some related `childFolders` exist."""
  childFoldersExist: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: FolderFilter

  """Checks for any expressions in this list."""
  or: [FolderFilter!]

  """Filter by the object’s `organization` relation."""
  organization: OrganizationFilter

  """Filter by the object’s `organizationId` field."""
  organizationId: UUIDFilter

  """Filter by the object’s `parent` relation."""
  parent: FolderFilter

  """A related `parent` exists."""
  parentExists: Boolean

  """Filter by the object’s `parentId` field."""
  parentId: UUIDFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `Folder`"""
input FolderInput {
  name: String!
  organizationId: UUID!
  parentId: UUID
}

"""
Represents an update to a `Folder`. Fields that are set will be updated.
"""
input FolderPatch {
  name: String
  organizationId: UUID
  parentId: UUID
}

"""
A filter to be used against many `Folder` object types. All fields are combined with a logical ‘and.’
"""
input FolderToManyFolderFilter {
  """
  Every related `Folder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FolderFilter

  """
  No related `Folder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FolderFilter

  """
  Some related `Folder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FolderFilter
}

"""A connection to a list of `Folder` values."""
type FoldersConnection {
  """
  A list of edges which contains the `Folder` and cursor to aid in pagination.
  """
  edges: [FoldersEdge!]!

  """A list of `Folder` objects."""
  nodes: [Folder!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Folder` you could get from the connection."""
  totalCount: Int!
}

"""A `Folder` edge in the connection."""
type FoldersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Folder` at the end of the edge."""
  node: Folder!
}

"""Methods to use when ordering `Folder`."""
enum FoldersOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""All input for the `forgotPassword` mutation."""
input ForgotPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""The output of our `forgotPassword` mutation."""
type ForgotPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value."""
  equalTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int

  """Included in the specified list."""
  in: [Int!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """Not included in the specified list."""
  notIn: [Int!]
}

"""All input for the `inviteToOrganization` mutation."""
input InviteToOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String
  organizationId: UUID!
  username: String
}

"""The output of our `inviteToOrganization` mutation."""
type InviteToOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
Represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """Contained by the specified JSON."""
  containedBy: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contains the specified key."""
  containsKey: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value."""
  equalTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Included in the specified list."""
  in: [JSON!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """Not included in the specified list."""
  notIn: [JSON!]
}

input LoginInput {
  password: String!
  username: String!
}

type LoginPayload {
  user: User!
}

type LogoutPayload {
  success: Boolean
}

"""All input for the `makeEmailPrimary` mutation."""
input MakeEmailPrimaryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  emailId: UUID!
}

"""The output of our `makeEmailPrimary` mutation."""
type MakeEmailPrimaryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User
  userEmail: UserEmail

  """An edge for our `UserEmail`. May be used by Relay 1."""
  userEmailEdge(
    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UserEmailsEdge
}

type Message implements Node {
  """Reads and enables pagination through a set of `MessageBodyRevision`."""
  bodyRevisions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageBodyRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageBodyRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MessageBodyRevision`."""
    orderBy: [MessageBodyRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessageBodyRevisionsConnection!

  """Reads a single `Consultation` that is related to this `Message`."""
  consultation: Consultation
  consultationId: UUID!
  createdAt: Datetime!
  id: UUID!
  isForClients: Boolean!
  isForStaff: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `User` that is related to this `Message`."""
  sender: User
  senderId: UUID
}

type MessageBodyRevision implements Node {
  """
  Reads and enables pagination through a set of `MessageBodyRevisionApproval`.
  """
  approvals(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageBodyRevisionApprovalCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageBodyRevisionApprovalFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MessageBodyRevisionApproval`."""
    orderBy: [MessageBodyRevisionApprovalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessageBodyRevisionApprovalsConnection!

  """Reads a single `User` that is related to this `MessageBodyRevision`."""
  author: User
  authorId: UUID

  """
  Reads and enables pagination through a set of `MessageBodyRevisionComment`.
  """
  comments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageBodyRevisionCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageBodyRevisionCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MessageBodyRevisionComment`."""
    orderBy: [MessageBodyRevisionCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessageBodyRevisionCommentsConnection!
  content: String!
  createdAt: Datetime!
  id: UUID!

  """The message that this revision is a part of."""
  message: Message
  messageId: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!
}

type MessageBodyRevisionApproval implements Node {
  """
  Reads a single `User` that is related to this `MessageBodyRevisionApproval`.
  """
  approver: User
  approverId: UUID

  """The revision that this approval is for."""
  bodyRevision: MessageBodyRevision
  bodyRevisionId: UUID!
  createdAt: Datetime!
  id: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A condition to be used against `MessageBodyRevisionApproval` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input MessageBodyRevisionApprovalCondition {
  """Checks for equality with the object’s `approverId` field."""
  approverId: UUID

  """Checks for equality with the object’s `bodyRevisionId` field."""
  bodyRevisionId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID
}

"""
A filter to be used against `MessageBodyRevisionApproval` object types. All fields are combined with a logical ‘and.’
"""
input MessageBodyRevisionApprovalFilter {
  """Checks for all expressions in this list."""
  and: [MessageBodyRevisionApprovalFilter!]

  """Filter by the object’s `approver` relation."""
  approver: UserFilter

  """A related `approver` exists."""
  approverExists: Boolean

  """Filter by the object’s `approverId` field."""
  approverId: UUIDFilter

  """Filter by the object’s `bodyRevision` relation."""
  bodyRevision: MessageBodyRevisionFilter

  """Filter by the object’s `bodyRevisionId` field."""
  bodyRevisionId: UUIDFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: MessageBodyRevisionApprovalFilter

  """Checks for any expressions in this list."""
  or: [MessageBodyRevisionApprovalFilter!]
}

"""A connection to a list of `MessageBodyRevisionApproval` values."""
type MessageBodyRevisionApprovalsConnection {
  """
  A list of edges which contains the `MessageBodyRevisionApproval` and cursor to aid in pagination.
  """
  edges: [MessageBodyRevisionApprovalsEdge!]!

  """A list of `MessageBodyRevisionApproval` objects."""
  nodes: [MessageBodyRevisionApproval!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MessageBodyRevisionApproval` you could get from the connection.
  """
  totalCount: Int!
}

"""A `MessageBodyRevisionApproval` edge in the connection."""
type MessageBodyRevisionApprovalsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MessageBodyRevisionApproval` at the end of the edge."""
  node: MessageBodyRevisionApproval!
}

"""Methods to use when ordering `MessageBodyRevisionApproval`."""
enum MessageBodyRevisionApprovalsOrderBy {
  APPROVER_ID_ASC
  APPROVER_ID_DESC
  BODY_REVISION_ID_ASC
  BODY_REVISION_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type MessageBodyRevisionComment implements Node {
  """The revision that this comment is for."""
  bodyRevision: MessageBodyRevision
  bodyRevisionId: UUID!

  """
  Reads a single `User` that is related to this `MessageBodyRevisionComment`.
  """
  commenter: User
  commenterId: UUID
  content: String!
  createdAt: Datetime!
  id: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!
}

"""
A condition to be used against `MessageBodyRevisionComment` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input MessageBodyRevisionCommentCondition {
  """Checks for equality with the object’s `bodyRevisionId` field."""
  bodyRevisionId: UUID

  """Checks for equality with the object’s `commenterId` field."""
  commenterId: UUID

  """Checks for equality with the object’s `content` field."""
  content: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `MessageBodyRevisionComment` object types. All fields are combined with a logical ‘and.’
"""
input MessageBodyRevisionCommentFilter {
  """Checks for all expressions in this list."""
  and: [MessageBodyRevisionCommentFilter!]

  """Filter by the object’s `bodyRevision` relation."""
  bodyRevision: MessageBodyRevisionFilter

  """Filter by the object’s `bodyRevisionId` field."""
  bodyRevisionId: UUIDFilter

  """Filter by the object’s `commenter` relation."""
  commenter: UserFilter

  """A related `commenter` exists."""
  commenterExists: Boolean

  """Filter by the object’s `commenterId` field."""
  commenterId: UUIDFilter

  """Filter by the object’s `content` field."""
  content: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: MessageBodyRevisionCommentFilter

  """Checks for any expressions in this list."""
  or: [MessageBodyRevisionCommentFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""A connection to a list of `MessageBodyRevisionComment` values."""
type MessageBodyRevisionCommentsConnection {
  """
  A list of edges which contains the `MessageBodyRevisionComment` and cursor to aid in pagination.
  """
  edges: [MessageBodyRevisionCommentsEdge!]!

  """A list of `MessageBodyRevisionComment` objects."""
  nodes: [MessageBodyRevisionComment!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MessageBodyRevisionComment` you could get from the connection.
  """
  totalCount: Int!
}

"""A `MessageBodyRevisionComment` edge in the connection."""
type MessageBodyRevisionCommentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MessageBodyRevisionComment` at the end of the edge."""
  node: MessageBodyRevisionComment!
}

"""Methods to use when ordering `MessageBodyRevisionComment`."""
enum MessageBodyRevisionCommentsOrderBy {
  BODY_REVISION_ID_ASC
  BODY_REVISION_ID_DESC
  COMMENTER_ID_ASC
  COMMENTER_ID_DESC
  CONTENT_ASC
  CONTENT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A condition to be used against `MessageBodyRevision` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input MessageBodyRevisionCondition {
  """Checks for equality with the object’s `authorId` field."""
  authorId: UUID

  """Checks for equality with the object’s `content` field."""
  content: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `messageId` field."""
  messageId: UUID

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `MessageBodyRevision` object types. All fields are combined with a logical ‘and.’
"""
input MessageBodyRevisionFilter {
  """Checks for all expressions in this list."""
  and: [MessageBodyRevisionFilter!]

  """Filter by the object’s `approvals` relation."""
  approvals: MessageBodyRevisionToManyMessageBodyRevisionApprovalFilter

  """Some related `approvals` exist."""
  approvalsExist: Boolean

  """Filter by the object’s `author` relation."""
  author: UserFilter

  """A related `author` exists."""
  authorExists: Boolean

  """Filter by the object’s `authorId` field."""
  authorId: UUIDFilter

  """Filter by the object’s `comments` relation."""
  comments: MessageBodyRevisionToManyMessageBodyRevisionCommentFilter

  """Some related `comments` exist."""
  commentsExist: Boolean

  """Filter by the object’s `content` field."""
  content: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `message` relation."""
  message: MessageFilter

  """Filter by the object’s `messageId` field."""
  messageId: UUIDFilter

  """Negates the expression."""
  not: MessageBodyRevisionFilter

  """Checks for any expressions in this list."""
  or: [MessageBodyRevisionFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""
A filter to be used against many `MessageBodyRevisionApproval` object types. All fields are combined with a logical ‘and.’
"""
input MessageBodyRevisionToManyMessageBodyRevisionApprovalFilter {
  """
  Every related `MessageBodyRevisionApproval` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MessageBodyRevisionApprovalFilter

  """
  No related `MessageBodyRevisionApproval` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MessageBodyRevisionApprovalFilter

  """
  Some related `MessageBodyRevisionApproval` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MessageBodyRevisionApprovalFilter
}

"""
A filter to be used against many `MessageBodyRevisionComment` object types. All fields are combined with a logical ‘and.’
"""
input MessageBodyRevisionToManyMessageBodyRevisionCommentFilter {
  """
  Every related `MessageBodyRevisionComment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MessageBodyRevisionCommentFilter

  """
  No related `MessageBodyRevisionComment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MessageBodyRevisionCommentFilter

  """
  Some related `MessageBodyRevisionComment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MessageBodyRevisionCommentFilter
}

"""A connection to a list of `MessageBodyRevision` values."""
type MessageBodyRevisionsConnection {
  """
  A list of edges which contains the `MessageBodyRevision` and cursor to aid in pagination.
  """
  edges: [MessageBodyRevisionsEdge!]!

  """A list of `MessageBodyRevision` objects."""
  nodes: [MessageBodyRevision!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MessageBodyRevision` you could get from the connection.
  """
  totalCount: Int!
}

"""A `MessageBodyRevision` edge in the connection."""
type MessageBodyRevisionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MessageBodyRevision` at the end of the edge."""
  node: MessageBodyRevision!
}

"""Methods to use when ordering `MessageBodyRevision`."""
enum MessageBodyRevisionsOrderBy {
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  CONTENT_ASC
  CONTENT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  MESSAGE_ID_ASC
  MESSAGE_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A condition to be used against `Message` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MessageCondition {
  """Checks for equality with the object’s `consultationId` field."""
  consultationId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isForClients` field."""
  isForClients: Boolean

  """Checks for equality with the object’s `isForStaff` field."""
  isForStaff: Boolean

  """Checks for equality with the object’s `senderId` field."""
  senderId: UUID
}

"""
A filter to be used against `Message` object types. All fields are combined with a logical ‘and.’
"""
input MessageFilter {
  """Checks for all expressions in this list."""
  and: [MessageFilter!]

  """Filter by the object’s `bodyRevisions` relation."""
  bodyRevisions: MessageToManyMessageBodyRevisionFilter

  """Some related `bodyRevisions` exist."""
  bodyRevisionsExist: Boolean

  """Filter by the object’s `consultation` relation."""
  consultation: ConsultationFilter

  """Filter by the object’s `consultationId` field."""
  consultationId: UUIDFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `isForClients` field."""
  isForClients: BooleanFilter

  """Filter by the object’s `isForStaff` field."""
  isForStaff: BooleanFilter

  """Negates the expression."""
  not: MessageFilter

  """Checks for any expressions in this list."""
  or: [MessageFilter!]

  """Filter by the object’s `sender` relation."""
  sender: UserFilter

  """A related `sender` exists."""
  senderExists: Boolean

  """Filter by the object’s `senderId` field."""
  senderId: UUIDFilter
}

"""
A filter to be used against many `MessageBodyRevision` object types. All fields are combined with a logical ‘and.’
"""
input MessageToManyMessageBodyRevisionFilter {
  """
  Every related `MessageBodyRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MessageBodyRevisionFilter

  """
  No related `MessageBodyRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MessageBodyRevisionFilter

  """
  Some related `MessageBodyRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MessageBodyRevisionFilter
}

"""A connection to a list of `Message` values."""
type MessagesConnection {
  """
  A list of edges which contains the `Message` and cursor to aid in pagination.
  """
  edges: [MessagesEdge!]!

  """A list of `Message` objects."""
  nodes: [Message!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Message` you could get from the connection."""
  totalCount: Int!
}

"""A `Message` edge in the connection."""
type MessagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Message` at the end of the edge."""
  node: Message!
}

"""Methods to use when ordering `Message`."""
enum MessagesOrderBy {
  CONSULTATION_ID_ASC
  CONSULTATION_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  IS_FOR_CLIENTS_ASC
  IS_FOR_CLIENTS_DESC
  IS_FOR_STAFF_ASC
  IS_FOR_STAFF_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SENDER_ID_ASC
  SENDER_ID_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  acceptInvitationToOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AcceptInvitationToOrganizationInput!
  ): AcceptInvitationToOrganizationPayload

  """Enter your old password and a new password to change your password."""
  changePassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ChangePasswordInput!
  ): ChangePasswordPayload

  """
  If you're certain you want to delete your account, use `requestAccountDeletion` to request an account deletion token, and then supply the token through this mutation to complete account deletion.
  """
  confirmAccountDeletion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ConfirmAccountDeletionInput!
  ): ConfirmAccountDeletionPayload

  """Creates a single `Consultation`."""
  createConsultation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateConsultationInput!
  ): CreateConsultationPayload

  """Creates a single `ConsultationParticipant`."""
  createConsultationParticipant(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateConsultationParticipantInput!
  ): CreateConsultationParticipantPayload

  """Creates a single `File`."""
  createFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFileInput!
  ): CreateFilePayload

  """Creates a single `Folder`."""
  createFolder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFolderInput!
  ): CreateFolderPayload
  createOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganizationInput!
  ): CreateOrganizationPayload

  """Creates a single `PdfFile`."""
  createPdfFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePdfFileInput!
  ): CreatePdfFilePayload

  """Creates a single `UserEmail`."""
  createUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserEmailInput!
  ): CreateUserEmailPayload

  """Deletes a single `Consultation` using a unique key."""
  deleteConsultation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteConsultationInput!
  ): DeleteConsultationPayload

  """Deletes a single `Consultation` using its globally unique id."""
  deleteConsultationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteConsultationByNodeIdInput!
  ): DeleteConsultationPayload

  """Deletes a single `ConsultationParticipant` using a unique key."""
  deleteConsultationParticipant(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteConsultationParticipantInput!
  ): DeleteConsultationParticipantPayload

  """Deletes a single `ConsultationParticipant` using a unique key."""
  deleteConsultationParticipantByConsultationIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteConsultationParticipantByConsultationIdAndUserIdInput!
  ): DeleteConsultationParticipantPayload

  """
  Deletes a single `ConsultationParticipant` using its globally unique id.
  """
  deleteConsultationParticipantByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteConsultationParticipantByNodeIdInput!
  ): DeleteConsultationParticipantPayload

  """Deletes a single `File` using a unique key."""
  deleteFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFileInput!
  ): DeleteFilePayload

  """Deletes a single `File` using its globally unique id."""
  deleteFileByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFileByNodeIdInput!
  ): DeleteFilePayload

  """Deletes a single `Folder` using a unique key."""
  deleteFolder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFolderInput!
  ): DeleteFolderPayload

  """Deletes a single `Folder` using its globally unique id."""
  deleteFolderByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFolderByNodeIdInput!
  ): DeleteFolderPayload
  deleteOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganizationInput!
  ): DeleteOrganizationPayload

  """Deletes a single `PdfFile` using a unique key."""
  deletePdfFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePdfFileInput!
  ): DeletePdfFilePayload

  """Deletes a single `PdfFile` using its globally unique id."""
  deletePdfFileByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePdfFileByNodeIdInput!
  ): DeletePdfFilePayload

  """Deletes a single `UserAuthentication` using a unique key."""
  deleteUserAuthentication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `UserAuthentication` using its globally unique id."""
  deleteUserAuthenticationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationByNodeIdInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `UserAuthentication` using a unique key."""
  deleteUserAuthenticationByServiceAndIdentifier(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAuthenticationByServiceAndIdentifierInput!
  ): DeleteUserAuthenticationPayload

  """Deletes a single `UserEmail` using a unique key."""
  deleteUserEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailInput!
  ): DeleteUserEmailPayload

  """Deletes a single `UserEmail` using its globally unique id."""
  deleteUserEmailByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailByNodeIdInput!
  ): DeleteUserEmailPayload

  """Deletes a single `UserEmail` using a unique key."""
  deleteUserEmailByUserIdAndEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserEmailByUserIdAndEmailInput!
  ): DeleteUserEmailPayload

  """
  If you've forgotten your password, give us one of your email addresses and we'll send you a reset token. Note this only works if you have added an email address!
  """
  forgotPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ForgotPasswordInput!
  ): ForgotPasswordPayload
  inviteToOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: InviteToOrganizationInput!
  ): InviteToOrganizationPayload

  """
  Use this mutation to log in to your account; this login uses sessions so you do not need to take further action.
  """
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload

  """
  Use this mutation to logout from your account. Don't forget to clear the client state!
  """
  logout: LogoutPayload

  """
  Your primary email is where we'll notify of account events; other emails may be used for discovery or login. Use this when you're changing your email address.
  """
  makeEmailPrimary(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MakeEmailPrimaryInput!
  ): MakeEmailPrimaryPayload

  """
  Use this mutation to create an account on our system. This may only be used if you are logged out.
  """
  register(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterInput!
  ): RegisterPayload
  removeFromOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RemoveFromOrganizationInput!
  ): RemoveFromOrganizationPayload

  """Begin the account deletion flow by requesting the confirmation email"""
  requestAccountDeletion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RequestAccountDeletionInput!
  ): RequestAccountDeletionPayload

  """
  If you didn't receive the verification code for this email, we can resend it. We silently cap the rate of resends on the backend, so calls to this function may not result in another email being sent if it has been called recently.
  """
  resendEmailVerificationCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResendEmailVerificationCodeInput!
  ): ResendEmailVerificationCodePayload

  """
  After triggering forgotPassword, you'll be sent a reset token. Combine this with your user ID and a new password to reset your password.
  """
  resetPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResetPasswordInput!
  ): ResetPasswordPayload
  transferOrganizationBillingContact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: TransferOrganizationBillingContactInput!
  ): TransferOrganizationBillingContactPayload
  transferOrganizationOwnership(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: TransferOrganizationOwnershipInput!
  ): TransferOrganizationOwnershipPayload

  """Updates a single `Consultation` using a unique key and a patch."""
  updateConsultation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateConsultationInput!
  ): UpdateConsultationPayload

  """
  Updates a single `Consultation` using its globally unique id and a patch.
  """
  updateConsultationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateConsultationByNodeIdInput!
  ): UpdateConsultationPayload

  """
  Updates a single `ConsultationParticipant` using a unique key and a patch.
  """
  updateConsultationParticipant(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateConsultationParticipantInput!
  ): UpdateConsultationParticipantPayload

  """
  Updates a single `ConsultationParticipant` using a unique key and a patch.
  """
  updateConsultationParticipantByConsultationIdAndUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateConsultationParticipantByConsultationIdAndUserIdInput!
  ): UpdateConsultationParticipantPayload

  """
  Updates a single `ConsultationParticipant` using its globally unique id and a patch.
  """
  updateConsultationParticipantByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateConsultationParticipantByNodeIdInput!
  ): UpdateConsultationParticipantPayload

  """Updates a single `File` using a unique key and a patch."""
  updateFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFileInput!
  ): UpdateFilePayload

  """Updates a single `File` using its globally unique id and a patch."""
  updateFileByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFileByNodeIdInput!
  ): UpdateFilePayload

  """Updates a single `Folder` using a unique key and a patch."""
  updateFolder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFolderInput!
  ): UpdateFolderPayload

  """Updates a single `Folder` using its globally unique id and a patch."""
  updateFolderByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFolderByNodeIdInput!
  ): UpdateFolderPayload

  """Updates a single `Organization` using a unique key and a patch."""
  updateOrganization(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationInput!
  ): UpdateOrganizationPayload

  """
  Updates a single `Organization` using its globally unique id and a patch.
  """
  updateOrganizationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationByNodeIdInput!
  ): UpdateOrganizationPayload

  """Updates a single `Organization` using a unique key and a patch."""
  updateOrganizationBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganizationBySlugInput!
  ): UpdateOrganizationPayload

  """Updates a single `PdfFile` using a unique key and a patch."""
  updatePdfFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePdfFileInput!
  ): UpdatePdfFilePayload

  """Updates a single `PdfFile` using its globally unique id and a patch."""
  updatePdfFileByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePdfFileByNodeIdInput!
  ): UpdatePdfFilePayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByUsernameInput!
  ): UpdateUserPayload

  """
  Once you have received a verification token for your email, you may call this mutation with that token to make your email verified.
  """
  verifyEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: VerifyEmailInput!
  ): VerifyEmailPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Organization implements Node {
  """Reads and enables pagination through a set of `Consultation`."""
  consultations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConsultationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConsultationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Consultation`."""
    orderBy: [ConsultationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConsultationsConnection!
  createdAt: Datetime!
  currentUserIsBillingContact: Boolean
  currentUserIsOwner: Boolean

  """Reads and enables pagination through a set of `Folder`."""
  folders(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FolderCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FolderFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Folder`."""
    orderBy: [FoldersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FoldersConnection!
  id: UUID!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMemberships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationMembershipFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsConnection!
  slug: String!
}

"""
A condition to be used against `Organization` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganizationCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """
  Checks for equality with the object’s `currentUserIsBillingContact` field.
  """
  currentUserIsBillingContact: Boolean

  """Checks for equality with the object’s `currentUserIsOwner` field."""
  currentUserIsOwner: Boolean

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `slug` field."""
  slug: String
}

"""
A filter to be used against `Organization` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationFilter {
  """Checks for all expressions in this list."""
  and: [OrganizationFilter!]

  """Filter by the object’s `consultations` relation."""
  consultations: OrganizationToManyConsultationFilter

  """Some related `consultations` exist."""
  consultationsExist: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `currentUserIsBillingContact` field."""
  currentUserIsBillingContact: BooleanFilter

  """Filter by the object’s `currentUserIsOwner` field."""
  currentUserIsOwner: BooleanFilter

  """Filter by the object’s `folders` relation."""
  folders: OrganizationToManyFolderFilter

  """Some related `folders` exist."""
  foldersExist: Boolean

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: OrganizationFilter

  """Checks for any expressions in this list."""
  or: [OrganizationFilter!]

  """Filter by the object’s `organizationMemberships` relation."""
  organizationMemberships: OrganizationToManyOrganizationMembershipFilter

  """Some related `organizationMemberships` exist."""
  organizationMembershipsExist: Boolean

  """Filter by the object’s `slug` field."""
  slug: StringFilter
}

type OrganizationMembership implements Node {
  createdAt: Datetime!
  id: UUID!
  isBillingContact: Boolean!
  isCounselor: Boolean!
  isDispatcher: Boolean!
  isOwner: Boolean!
  isSupervisor: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Reads a single `Organization` that is related to this `OrganizationMembership`.
  """
  organization: Organization
  organizationId: UUID!

  """
  Reads a single `User` that is related to this `OrganizationMembership`.
  """
  user: User
  userId: UUID!
}

"""
A condition to be used against `OrganizationMembership` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input OrganizationMembershipCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isBillingContact` field."""
  isBillingContact: Boolean

  """Checks for equality with the object’s `isCounselor` field."""
  isCounselor: Boolean

  """Checks for equality with the object’s `isDispatcher` field."""
  isDispatcher: Boolean

  """Checks for equality with the object’s `isOwner` field."""
  isOwner: Boolean

  """Checks for equality with the object’s `isSupervisor` field."""
  isSupervisor: Boolean

  """Checks for equality with the object’s `organizationId` field."""
  organizationId: UUID

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""
A filter to be used against `OrganizationMembership` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationMembershipFilter {
  """Checks for all expressions in this list."""
  and: [OrganizationMembershipFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `isBillingContact` field."""
  isBillingContact: BooleanFilter

  """Filter by the object’s `isCounselor` field."""
  isCounselor: BooleanFilter

  """Filter by the object’s `isDispatcher` field."""
  isDispatcher: BooleanFilter

  """Filter by the object’s `isOwner` field."""
  isOwner: BooleanFilter

  """Filter by the object’s `isSupervisor` field."""
  isSupervisor: BooleanFilter

  """Negates the expression."""
  not: OrganizationMembershipFilter

  """Checks for any expressions in this list."""
  or: [OrganizationMembershipFilter!]

  """Filter by the object’s `organization` relation."""
  organization: OrganizationFilter

  """Filter by the object’s `organizationId` field."""
  organizationId: UUIDFilter

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter
}

"""A connection to a list of `OrganizationMembership` values."""
type OrganizationMembershipsConnection {
  """
  A list of edges which contains the `OrganizationMembership` and cursor to aid in pagination.
  """
  edges: [OrganizationMembershipsEdge!]!

  """A list of `OrganizationMembership` objects."""
  nodes: [OrganizationMembership!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `OrganizationMembership` you could get from the connection.
  """
  totalCount: Int!
}

"""A `OrganizationMembership` edge in the connection."""
type OrganizationMembershipsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OrganizationMembership` at the end of the edge."""
  node: OrganizationMembership!
}

"""Methods to use when ordering `OrganizationMembership`."""
enum OrganizationMembershipsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  IS_BILLING_CONTACT_ASC
  IS_BILLING_CONTACT_DESC
  IS_COUNSELOR_ASC
  IS_COUNSELOR_DESC
  IS_DISPATCHER_ASC
  IS_DISPATCHER_DESC
  IS_OWNER_ASC
  IS_OWNER_DESC
  IS_SUPERVISOR_ASC
  IS_SUPERVISOR_DESC
  NATURAL
  ORGANIZATION_ID_ASC
  ORGANIZATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""
Represents an update to a `Organization`. Fields that are set will be updated.
"""
input OrganizationPatch {
  name: String
  slug: String
}

"""
A filter to be used against many `Consultation` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationToManyConsultationFilter {
  """
  Every related `Consultation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ConsultationFilter

  """
  No related `Consultation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ConsultationFilter

  """
  Some related `Consultation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ConsultationFilter
}

"""
A filter to be used against many `Folder` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationToManyFolderFilter {
  """
  Every related `Folder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FolderFilter

  """
  No related `Folder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FolderFilter

  """
  Some related `Folder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FolderFilter
}

"""
A filter to be used against many `OrganizationMembership` object types. All fields are combined with a logical ‘and.’
"""
input OrganizationToManyOrganizationMembershipFilter {
  """
  Every related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: OrganizationMembershipFilter

  """
  No related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: OrganizationMembershipFilter

  """
  Some related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: OrganizationMembershipFilter
}

"""A connection to a list of `Organization` values."""
type OrganizationsConnection {
  """
  A list of edges which contains the `Organization` and cursor to aid in pagination.
  """
  edges: [OrganizationsEdge!]!

  """A list of `Organization` objects."""
  nodes: [Organization!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organization` you could get from the connection."""
  totalCount: Int!
}

"""A `Organization` edge in the connection."""
type OrganizationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Organization` at the end of the edge."""
  node: Organization!
}

"""Methods to use when ordering `Organization`."""
enum OrganizationsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SLUG_ASC
  SLUG_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type PdfFile implements Node {
  contentAsPlainText: String
  createdAt: Datetime!

  """Reads a single `File` that is related to this `PdfFile`."""
  file: File
  id: UUID!
  metadata: JSON

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  pages: Int!

  """Reads a single `File` that is related to this `PdfFile`."""
  thumbnail: File
  thumbnailId: UUID
  title: String
  updatedAt: Datetime!
}

"""
A condition to be used against `PdfFile` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PdfFileCondition {
  """Checks for equality with the object’s `contentAsPlainText` field."""
  contentAsPlainText: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `metadata` field."""
  metadata: JSON

  """Checks for equality with the object’s `pages` field."""
  pages: Int

  """Checks for equality with the object’s `thumbnailId` field."""
  thumbnailId: UUID

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `PdfFile` object types. All fields are combined with a logical ‘and.’
"""
input PdfFileFilter {
  """Checks for all expressions in this list."""
  and: [PdfFileFilter!]

  """Filter by the object’s `contentAsPlainText` field."""
  contentAsPlainText: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `file` relation."""
  file: FileFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `metadata` field."""
  metadata: JSONFilter

  """Negates the expression."""
  not: PdfFileFilter

  """Checks for any expressions in this list."""
  or: [PdfFileFilter!]

  """Filter by the object’s `pages` field."""
  pages: IntFilter

  """Filter by the object’s `thumbnail` relation."""
  thumbnail: FileFilter

  """A related `thumbnail` exists."""
  thumbnailExists: Boolean

  """Filter by the object’s `thumbnailId` field."""
  thumbnailId: UUIDFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `PdfFile`"""
input PdfFileInput {
  contentAsPlainText: String
  id: UUID!
  metadata: JSON
  pages: Int!
  thumbnailId: UUID
  title: String
}

"""
Represents an update to a `PdfFile`. Fields that are set will be updated.
"""
input PdfFilePatch {
  contentAsPlainText: String
  id: UUID
  metadata: JSON
  pages: Int
  thumbnailId: UUID
  title: String
}

"""A connection to a list of `PdfFile` values."""
type PdfFilesConnection {
  """
  A list of edges which contains the `PdfFile` and cursor to aid in pagination.
  """
  edges: [PdfFilesEdge!]!

  """A list of `PdfFile` objects."""
  nodes: [PdfFile!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PdfFile` you could get from the connection."""
  totalCount: Int!
}

"""A `PdfFile` edge in the connection."""
type PdfFilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PdfFile` at the end of the edge."""
  node: PdfFile!
}

"""Methods to use when ordering `PdfFile`."""
enum PdfFilesOrderBy {
  CONTENT_AS_PLAIN_TEXT_ASC
  CONTENT_AS_PLAIN_TEXT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  METADATA_ASC
  METADATA_DESC
  NATURAL
  PAGES_ASC
  PAGES_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  THUMBNAIL_ID_ASC
  THUMBNAIL_ID_DESC
  TITLE_ASC
  TITLE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Get a single `Consultation`."""
  consultation(id: UUID!): Consultation

  """Reads a single `Consultation` using its globally unique `ID`."""
  consultationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Consultation`.
    """
    nodeId: ID!
  ): Consultation

  """Get a single `ConsultationParticipant`."""
  consultationParticipant(id: UUID!): ConsultationParticipant

  """Get a single `ConsultationParticipant`."""
  consultationParticipantByConsultationIdAndUserId(consultationId: UUID!, userId: UUID!): ConsultationParticipant

  """
  Reads a single `ConsultationParticipant` using its globally unique `ID`.
  """
  consultationParticipantByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ConsultationParticipant`.
    """
    nodeId: ID!
  ): ConsultationParticipant

  """
  Reads and enables pagination through a set of `ConsultationParticipant`.
  """
  consultationParticipants(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConsultationParticipantCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConsultationParticipantFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ConsultationParticipant`."""
    orderBy: [ConsultationParticipantsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConsultationParticipantsConnection

  """Reads and enables pagination through a set of `Consultation`."""
  consultations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConsultationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConsultationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Consultation`."""
    orderBy: [ConsultationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConsultationsConnection

  """Handy method to get the current session ID."""
  currentSessionId: UUID

  """The currently logged in user (or null if not logged in)."""
  currentUser: User

  """Reads and enables pagination through a set of `Uuid`."""
  currentUserConsultationIds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UUIDFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CurrentUserConsultationIdsConnection

  """
  Handy method to get the current user ID for use in RLS policies, etc; in GraphQL, use `currentUser{id}` instead.
  """
  currentUserId: UUID

  """Reads and enables pagination through a set of `Uuid`."""
  currentUserInvitedOrganizationIds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UUIDFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CurrentUserInvitedOrganizationIdsConnection

  """Reads and enables pagination through a set of `Uuid`."""
  currentUserMemberOrganizationIds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UUIDFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CurrentUserMemberOrganizationIdsConnection

  """Get a single `File`."""
  file(id: UUID!): File

  """Reads a single `File` using its globally unique `ID`."""
  fileByNodeId(
    """The globally unique `ID` to be used in selecting a single `File`."""
    nodeId: ID!
  ): File

  """Reads and enables pagination through a set of `File`."""
  files(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilesConnection

  """Get a single `Folder`."""
  folder(id: UUID!): Folder

  """Reads a single `Folder` using its globally unique `ID`."""
  folderByNodeId(
    """The globally unique `ID` to be used in selecting a single `Folder`."""
    nodeId: ID!
  ): Folder

  """Reads and enables pagination through a set of `Folder`."""
  folders(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FolderCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FolderFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Folder`."""
    orderBy: [FoldersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FoldersConnection

  """Get a single `Message`."""
  message(id: UUID!): Message

  """Get a single `MessageBodyRevision`."""
  messageBodyRevision(id: UUID!): MessageBodyRevision

  """Get a single `MessageBodyRevisionApproval`."""
  messageBodyRevisionApproval(id: UUID!): MessageBodyRevisionApproval

  """
  Reads a single `MessageBodyRevisionApproval` using its globally unique `ID`.
  """
  messageBodyRevisionApprovalByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `MessageBodyRevisionApproval`.
    """
    nodeId: ID!
  ): MessageBodyRevisionApproval

  """
  Reads and enables pagination through a set of `MessageBodyRevisionApproval`.
  """
  messageBodyRevisionApprovals(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageBodyRevisionApprovalCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageBodyRevisionApprovalFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MessageBodyRevisionApproval`."""
    orderBy: [MessageBodyRevisionApprovalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessageBodyRevisionApprovalsConnection

  """Reads a single `MessageBodyRevision` using its globally unique `ID`."""
  messageBodyRevisionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `MessageBodyRevision`.
    """
    nodeId: ID!
  ): MessageBodyRevision

  """Get a single `MessageBodyRevisionComment`."""
  messageBodyRevisionComment(id: UUID!): MessageBodyRevisionComment

  """
  Reads a single `MessageBodyRevisionComment` using its globally unique `ID`.
  """
  messageBodyRevisionCommentByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `MessageBodyRevisionComment`.
    """
    nodeId: ID!
  ): MessageBodyRevisionComment

  """
  Reads and enables pagination through a set of `MessageBodyRevisionComment`.
  """
  messageBodyRevisionComments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageBodyRevisionCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageBodyRevisionCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MessageBodyRevisionComment`."""
    orderBy: [MessageBodyRevisionCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessageBodyRevisionCommentsConnection

  """Reads and enables pagination through a set of `MessageBodyRevision`."""
  messageBodyRevisions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageBodyRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageBodyRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MessageBodyRevision`."""
    orderBy: [MessageBodyRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessageBodyRevisionsConnection

  """Reads a single `Message` using its globally unique `ID`."""
  messageByNodeId(
    """The globally unique `ID` to be used in selecting a single `Message`."""
    nodeId: ID!
  ): Message

  """Reads and enables pagination through a set of `Message`."""
  messages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessagesConnection

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Get a single `Organization`."""
  organization(id: UUID!): Organization

  """Reads a single `Organization` using its globally unique `ID`."""
  organizationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Organization`.
    """
    nodeId: ID!
  ): Organization

  """Get a single `Organization`."""
  organizationBySlug(slug: String!): Organization
  organizationForInvitation(code: String, invitationId: UUID!): Organization

  """Get a single `OrganizationMembership`."""
  organizationMembership(id: UUID!): OrganizationMembership

  """
  Reads a single `OrganizationMembership` using its globally unique `ID`.
  """
  organizationMembershipByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `OrganizationMembership`.
    """
    nodeId: ID!
  ): OrganizationMembership

  """Get a single `OrganizationMembership`."""
  organizationMembershipByOrganizationIdAndUserId(organizationId: UUID!, userId: UUID!): OrganizationMembership

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMemberships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationMembershipFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsConnection

  """Reads and enables pagination through a set of `Organization`."""
  organizations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationsConnection

  """Get a single `PdfFile`."""
  pdfFile(id: UUID!): PdfFile

  """Reads a single `PdfFile` using its globally unique `ID`."""
  pdfFileByNodeId(
    """The globally unique `ID` to be used in selecting a single `PdfFile`."""
    nodeId: ID!
  ): PdfFile

  """Reads and enables pagination through a set of `PdfFile`."""
  pdfFiles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PdfFileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PdfFileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PdfFile`."""
    orderBy: [PdfFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PdfFilesConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Get a single `User`."""
  user(id: UUID!): User

  """Get a single `UserAuthentication`."""
  userAuthentication(id: UUID!): UserAuthentication

  """Reads a single `UserAuthentication` using its globally unique `ID`."""
  userAuthenticationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `UserAuthentication`.
    """
    nodeId: ID!
  ): UserAuthentication

  """Get a single `UserAuthentication`."""
  userAuthenticationByServiceAndIdentifier(identifier: String!, service: String!): UserAuthentication

  """Reads and enables pagination through a set of `UserAuthentication`."""
  userAuthentications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAuthenticationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserAuthenticationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserAuthenticationsConnection

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User

  """Get a single `User`."""
  userByUsername(username: String!): User

  """Get a single `UserEmail`."""
  userEmail(id: UUID!): UserEmail

  """Reads a single `UserEmail` using its globally unique `ID`."""
  userEmailByNodeId(
    """The globally unique `ID` to be used in selecting a single `UserEmail`."""
    nodeId: ID!
  ): UserEmail

  """Get a single `UserEmail`."""
  userEmailByUserIdAndEmail(email: String!, userId: UUID!): UserEmail

  """Reads and enables pagination through a set of `UserEmail`."""
  userEmails(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEmailCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserEmailFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsConnection

  """Reads and enables pagination through a set of `User`."""
  users(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection
}

input RegisterInput {
  avatarUrl: String
  email: String!
  name: String
  password: String!
  username: String!
}

type RegisterPayload {
  user: User!
}

"""All input for the `removeFromOrganization` mutation."""
input RemoveFromOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  userId: UUID!
}

"""The output of our `removeFromOrganization` mutation."""
type RemoveFromOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `requestAccountDeletion` mutation."""
input RequestAccountDeletionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `requestAccountDeletion` mutation."""
type RequestAccountDeletionPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `resendEmailVerificationCode` mutation."""
input ResendEmailVerificationCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  emailId: UUID!
}

"""The output of our `resendEmailVerificationCode` mutation."""
type ResendEmailVerificationCodePayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `resetPassword` mutation."""
input ResetPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  newPassword: String!
  resetToken: String!
  userId: UUID!
}

"""The output of our `resetPassword` mutation."""
type ResetPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  success: Boolean
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Equal to the specified value."""
  equalTo: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String

  """Included in the specified list."""
  in: [String!]

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """Not equal to the specified value."""
  notEqualTo: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """Not included in the specified list."""
  notIn: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String
}

"""All input for the `transferOrganizationBillingContact` mutation."""
input TransferOrganizationBillingContactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  userId: UUID!
}

"""The output of our `transferOrganizationBillingContact` mutation."""
type TransferOrganizationBillingContactPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `transferOrganizationOwnership` mutation."""
input TransferOrganizationOwnershipInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  organizationId: UUID!
  userId: UUID!
}

"""The output of our `transferOrganizationOwnership` mutation."""
type TransferOrganizationOwnershipPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value."""
  equalTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID

  """Included in the specified list."""
  in: [UUID!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """Not included in the specified list."""
  notIn: [UUID!]
}

"""All input for the `updateConsultationByNodeId` mutation."""
input UpdateConsultationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Consultation` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Consultation` being updated.
  """
  patch: ConsultationPatch!
}

"""All input for the `updateConsultation` mutation."""
input UpdateConsultationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Consultation` being updated.
  """
  patch: ConsultationPatch!
}

"""
All input for the `updateConsultationParticipantByConsultationIdAndUserId` mutation.
"""
input UpdateConsultationParticipantByConsultationIdAndUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  consultationId: UUID!

  """
  An object where the defined keys will be set on the `ConsultationParticipant` being updated.
  """
  patch: ConsultationParticipantPatch!
  userId: UUID!
}

"""All input for the `updateConsultationParticipantByNodeId` mutation."""
input UpdateConsultationParticipantByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ConsultationParticipant` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ConsultationParticipant` being updated.
  """
  patch: ConsultationParticipantPatch!
}

"""All input for the `updateConsultationParticipant` mutation."""
input UpdateConsultationParticipantInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `ConsultationParticipant` being updated.
  """
  patch: ConsultationParticipantPatch!
}

"""The output of our update `ConsultationParticipant` mutation."""
type UpdateConsultationParticipantPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  "\nThe consultation this participant is part of.\n"
  consultation: Consultation

  """The `ConsultationParticipant` that was updated by this mutation."""
  consultationParticipant: ConsultationParticipant

  """An edge for our `ConsultationParticipant`. May be used by Relay 1."""
  consultationParticipantEdge(
    """The method to use when ordering `ConsultationParticipant`."""
    orderBy: [ConsultationParticipantsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ConsultationParticipantsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `ConsultationParticipant`.
  """
  user: User
}

"""The output of our update `Consultation` mutation."""
type UpdateConsultationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Consultation` that was updated by this mutation."""
  consultation: Consultation

  """An edge for our `Consultation`. May be used by Relay 1."""
  consultationEdge(
    """The method to use when ordering `Consultation`."""
    orderBy: [ConsultationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ConsultationsEdge

  """Reads a single `Organization` that is related to this `Consultation`."""
  organization: Organization

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFileByNodeId` mutation."""
input UpdateFileByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `File` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `File` being updated.
  """
  patch: FilePatch!
}

"""All input for the `updateFile` mutation."""
input UpdateFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `File` being updated.
  """
  patch: FilePatch!
}

"""The output of our update `File` mutation."""
type UpdateFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `File` that was updated by this mutation."""
  file: File

  """An edge for our `File`. May be used by Relay 1."""
  fileEdge(
    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): FilesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `File`."""
  uploader: User
}

"""All input for the `updateFolderByNodeId` mutation."""
input UpdateFolderByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Folder` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Folder` being updated.
  """
  patch: FolderPatch!
}

"""All input for the `updateFolder` mutation."""
input UpdateFolderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Folder` being updated.
  """
  patch: FolderPatch!
}

"""The output of our update `Folder` mutation."""
type UpdateFolderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Folder` that was updated by this mutation."""
  folder: Folder

  """An edge for our `Folder`. May be used by Relay 1."""
  folderEdge(
    """The method to use when ordering `Folder`."""
    orderBy: [FoldersOrderBy!]! = [PRIMARY_KEY_ASC]
  ): FoldersEdge

  """Reads a single `Organization` that is related to this `Folder`."""
  organization: Organization

  """Reads a single `Folder` that is related to this `Folder`."""
  parent: Folder

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateOrganizationByNodeId` mutation."""
input UpdateOrganizationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Organization` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
}

"""All input for the `updateOrganizationBySlug` mutation."""
input UpdateOrganizationBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
  slug: String!
}

"""All input for the `updateOrganization` mutation."""
input UpdateOrganizationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Organization` being updated.
  """
  patch: OrganizationPatch!
}

"""The output of our update `Organization` mutation."""
type UpdateOrganizationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organization` that was updated by this mutation."""
  organization: Organization

  """An edge for our `Organization`. May be used by Relay 1."""
  organizationEdge(
    """The method to use when ordering `Organization`."""
    orderBy: [OrganizationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): OrganizationsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePdfFileByNodeId` mutation."""
input UpdatePdfFileByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PdfFile` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PdfFile` being updated.
  """
  patch: PdfFilePatch!
}

"""All input for the `updatePdfFile` mutation."""
input UpdatePdfFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `PdfFile` being updated.
  """
  patch: PdfFilePatch!
}

"""The output of our update `PdfFile` mutation."""
type UpdatePdfFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `File` that is related to this `PdfFile`."""
  file: File

  """The `PdfFile` that was updated by this mutation."""
  pdfFile: PdfFile

  """An edge for our `PdfFile`. May be used by Relay 1."""
  pdfFileEdge(
    """The method to use when ordering `PdfFile`."""
    orderBy: [PdfFilesOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PdfFilesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `File` that is related to this `PdfFile`."""
  thumbnail: File
}

"""All input for the `updateUserByNodeId` mutation."""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""All input for the `updateUserByUsername` mutation."""
input UpdateUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!

  """Public-facing username (or 'handle') of the user."""
  username: String!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique identifier for the user."""
  id: UUID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was updated by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]! = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A user who can log in to the application."""
type User implements Node {
  """Reads and enables pagination through a set of `MessageBodyRevision`."""
  authoredMessageBodyRevisions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageBodyRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageBodyRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MessageBodyRevision`."""
    orderBy: [MessageBodyRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessageBodyRevisionsConnection!

  """Optional avatar URL."""
  avatarUrl: String

  """
  Reads and enables pagination through a set of `ConsultationParticipant`.
  """
  consultationParticipants(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConsultationParticipantCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConsultationParticipantFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ConsultationParticipant`."""
    orderBy: [ConsultationParticipantsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConsultationParticipantsConnection!
  createdAt: Datetime!

  """Reads and enables pagination through a set of `File`."""
  filesByUploaderId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilesConnection!
  hasPassword: Boolean

  """Unique identifier for the user."""
  id: UUID!

  """If true, the user has elevated privileges."""
  isAdmin: Boolean!
  isVerified: Boolean!

  """
  Reads and enables pagination through a set of `MessageBodyRevisionApproval`.
  """
  messageBodyRevisionApprovalsByApproverId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageBodyRevisionApprovalCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageBodyRevisionApprovalFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MessageBodyRevisionApproval`."""
    orderBy: [MessageBodyRevisionApprovalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessageBodyRevisionApprovalsConnection!

  """
  Reads and enables pagination through a set of `MessageBodyRevisionComment`.
  """
  messageBodyRevisionCommentsByCommenterId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageBodyRevisionCommentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageBodyRevisionCommentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MessageBodyRevisionComment`."""
    orderBy: [MessageBodyRevisionCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessageBodyRevisionCommentsConnection!

  """Reads and enables pagination through a set of `Message`."""
  messagesBySenderId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessagesConnection!

  """Public-facing name (or pseudonym) of the user."""
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Reads and enables pagination through a set of `OrganizationMembership`.
  """
  organizationMemberships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganizationMembershipCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OrganizationMembershipFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OrganizationMembership`."""
    orderBy: [OrganizationMembershipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganizationMembershipsConnection!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `UserAuthentication`."""
  userAuthentications(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAuthenticationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserAuthenticationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserAuthentication`."""
    orderBy: [UserAuthenticationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserAuthenticationsConnection!

  """Reads and enables pagination through a set of `UserEmail`."""
  userEmails(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserEmailCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserEmailFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UserEmail`."""
    orderBy: [UserEmailsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserEmailsConnection!

  """Public-facing username (or 'handle') of the user."""
  username: String!
}

"""
Contains information about the login providers this user has used, so that they may disconnect them should they wish.
"""
type UserAuthentication implements Node {
  createdAt: Datetime!

  """Additional profile details extracted from this login method"""
  details: JSON!
  id: UUID!

  """A unique identifier for the user within the login service."""
  identifier: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """The login service used, e.g. `twitter` or `github`."""
  service: String!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserAuthentication`."""
  user: User
  userId: UUID!
}

"""
A condition to be used against `UserAuthentication` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserAuthenticationCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `details` field."""
  details: JSON

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `identifier` field."""
  identifier: String

  """Checks for equality with the object’s `service` field."""
  service: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""
A filter to be used against `UserAuthentication` object types. All fields are combined with a logical ‘and.’
"""
input UserAuthenticationFilter {
  """Checks for all expressions in this list."""
  and: [UserAuthenticationFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `details` field."""
  details: JSONFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `identifier` field."""
  identifier: StringFilter

  """Negates the expression."""
  not: UserAuthenticationFilter

  """Checks for any expressions in this list."""
  or: [UserAuthenticationFilter!]

  """Filter by the object’s `service` field."""
  service: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter
}

"""A connection to a list of `UserAuthentication` values."""
type UserAuthenticationsConnection {
  """
  A list of edges which contains the `UserAuthentication` and cursor to aid in pagination.
  """
  edges: [UserAuthenticationsEdge!]!

  """A list of `UserAuthentication` objects."""
  nodes: [UserAuthentication!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `UserAuthentication` you could get from the connection.
  """
  totalCount: Int!
}

"""A `UserAuthentication` edge in the connection."""
type UserAuthenticationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserAuthentication` at the end of the edge."""
  node: UserAuthentication!
}

"""Methods to use when ordering `UserAuthentication`."""
enum UserAuthenticationsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  DETAILS_ASC
  DETAILS_DESC
  IDENTIFIER_ASC
  IDENTIFIER_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SERVICE_ASC
  SERVICE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `avatarUrl` field."""
  avatarUrl: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `hasPassword` field."""
  hasPassword: Boolean

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isAdmin` field."""
  isAdmin: Boolean

  """Checks for equality with the object’s `isVerified` field."""
  isVerified: Boolean

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `username` field."""
  username: String
}

"""Information about a user's email address."""
type UserEmail implements Node {
  createdAt: Datetime!

  """The users email address, in `a@b.c` format."""
  email: String!
  id: UUID!
  isPrimary: Boolean!

  """
  True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise.
  """
  isVerified: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `UserEmail`."""
  user: User
  userId: UUID!
}

"""
A condition to be used against `UserEmail` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserEmailCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `isPrimary` field."""
  isPrimary: Boolean

  """Checks for equality with the object’s `isVerified` field."""
  isVerified: Boolean

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: UUID
}

"""
A filter to be used against `UserEmail` object types. All fields are combined with a logical ‘and.’
"""
input UserEmailFilter {
  """Checks for all expressions in this list."""
  and: [UserEmailFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `isPrimary` field."""
  isPrimary: BooleanFilter

  """Filter by the object’s `isVerified` field."""
  isVerified: BooleanFilter

  """Negates the expression."""
  not: UserEmailFilter

  """Checks for any expressions in this list."""
  or: [UserEmailFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """Filter by the object’s `userId` field."""
  userId: UUIDFilter
}

"""An input for mutations affecting `UserEmail`"""
input UserEmailInput {
  """The users email address, in `a@b.c` format."""
  email: String!
}

"""A connection to a list of `UserEmail` values."""
type UserEmailsConnection {
  """
  A list of edges which contains the `UserEmail` and cursor to aid in pagination.
  """
  edges: [UserEmailsEdge!]!

  """A list of `UserEmail` objects."""
  nodes: [UserEmail!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserEmail` you could get from the connection."""
  totalCount: Int!
}

"""A `UserEmail` edge in the connection."""
type UserEmailsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserEmail` at the end of the edge."""
  node: UserEmail!
}

"""Methods to use when ordering `UserEmail`."""
enum UserEmailsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  EMAIL_ASC
  EMAIL_DESC
  ID_ASC
  ID_DESC
  IS_PRIMARY_ASC
  IS_PRIMARY_DESC
  IS_VERIFIED_ASC
  IS_VERIFIED_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input UserFilter {
  """Checks for all expressions in this list."""
  and: [UserFilter!]

  """Filter by the object’s `authoredMessageBodyRevisions` relation."""
  authoredMessageBodyRevisions: UserToManyMessageBodyRevisionFilter

  """Some related `authoredMessageBodyRevisions` exist."""
  authoredMessageBodyRevisionsExist: Boolean

  """Filter by the object’s `avatarUrl` field."""
  avatarUrl: StringFilter

  """Filter by the object’s `consultationParticipants` relation."""
  consultationParticipants: UserToManyConsultationParticipantFilter

  """Some related `consultationParticipants` exist."""
  consultationParticipantsExist: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `filesByUploaderId` relation."""
  filesByUploaderId: UserToManyFileFilter

  """Some related `filesByUploaderId` exist."""
  filesByUploaderIdExist: Boolean

  """Filter by the object’s `hasPassword` field."""
  hasPassword: BooleanFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `isAdmin` field."""
  isAdmin: BooleanFilter

  """Filter by the object’s `isVerified` field."""
  isVerified: BooleanFilter

  """
  Filter by the object’s `messageBodyRevisionApprovalsByApproverId` relation.
  """
  messageBodyRevisionApprovalsByApproverId: UserToManyMessageBodyRevisionApprovalFilter

  """Some related `messageBodyRevisionApprovalsByApproverId` exist."""
  messageBodyRevisionApprovalsByApproverIdExist: Boolean

  """
  Filter by the object’s `messageBodyRevisionCommentsByCommenterId` relation.
  """
  messageBodyRevisionCommentsByCommenterId: UserToManyMessageBodyRevisionCommentFilter

  """Some related `messageBodyRevisionCommentsByCommenterId` exist."""
  messageBodyRevisionCommentsByCommenterIdExist: Boolean

  """Filter by the object’s `messagesBySenderId` relation."""
  messagesBySenderId: UserToManyMessageFilter

  """Some related `messagesBySenderId` exist."""
  messagesBySenderIdExist: Boolean

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: UserFilter

  """Checks for any expressions in this list."""
  or: [UserFilter!]

  """Filter by the object’s `organizationMemberships` relation."""
  organizationMemberships: UserToManyOrganizationMembershipFilter

  """Some related `organizationMemberships` exist."""
  organizationMembershipsExist: Boolean

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `userAuthentications` relation."""
  userAuthentications: UserToManyUserAuthenticationFilter

  """Some related `userAuthentications` exist."""
  userAuthenticationsExist: Boolean

  """Filter by the object’s `userEmails` relation."""
  userEmails: UserToManyUserEmailFilter

  """Some related `userEmails` exist."""
  userEmailsExist: Boolean

  """Filter by the object’s `username` field."""
  username: StringFilter
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  """Optional avatar URL."""
  avatarUrl: String

  """Public-facing name (or pseudonym) of the user."""
  name: String

  """Public-facing username (or 'handle') of the user."""
  username: String
}

"""
A filter to be used against many `ConsultationParticipant` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyConsultationParticipantFilter {
  """
  Every related `ConsultationParticipant` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ConsultationParticipantFilter

  """
  No related `ConsultationParticipant` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ConsultationParticipantFilter

  """
  Some related `ConsultationParticipant` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ConsultationParticipantFilter
}

"""
A filter to be used against many `File` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyFileFilter {
  """
  Every related `File` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FileFilter

  """
  No related `File` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FileFilter

  """
  Some related `File` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FileFilter
}

"""
A filter to be used against many `MessageBodyRevisionApproval` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyMessageBodyRevisionApprovalFilter {
  """
  Every related `MessageBodyRevisionApproval` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MessageBodyRevisionApprovalFilter

  """
  No related `MessageBodyRevisionApproval` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MessageBodyRevisionApprovalFilter

  """
  Some related `MessageBodyRevisionApproval` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MessageBodyRevisionApprovalFilter
}

"""
A filter to be used against many `MessageBodyRevisionComment` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyMessageBodyRevisionCommentFilter {
  """
  Every related `MessageBodyRevisionComment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MessageBodyRevisionCommentFilter

  """
  No related `MessageBodyRevisionComment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MessageBodyRevisionCommentFilter

  """
  Some related `MessageBodyRevisionComment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MessageBodyRevisionCommentFilter
}

"""
A filter to be used against many `MessageBodyRevision` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyMessageBodyRevisionFilter {
  """
  Every related `MessageBodyRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MessageBodyRevisionFilter

  """
  No related `MessageBodyRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MessageBodyRevisionFilter

  """
  Some related `MessageBodyRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MessageBodyRevisionFilter
}

"""
A filter to be used against many `Message` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyMessageFilter {
  """
  Every related `Message` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MessageFilter

  """
  No related `Message` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MessageFilter

  """
  Some related `Message` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MessageFilter
}

"""
A filter to be used against many `OrganizationMembership` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyOrganizationMembershipFilter {
  """
  Every related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: OrganizationMembershipFilter

  """
  No related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: OrganizationMembershipFilter

  """
  Some related `OrganizationMembership` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: OrganizationMembershipFilter
}

"""
A filter to be used against many `UserAuthentication` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyUserAuthenticationFilter {
  """
  Every related `UserAuthentication` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: UserAuthenticationFilter

  """
  No related `UserAuthentication` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: UserAuthenticationFilter

  """
  Some related `UserAuthentication` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: UserAuthenticationFilter
}

"""
A filter to be used against many `UserEmail` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyUserEmailFilter {
  """
  Every related `UserEmail` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: UserEmailFilter

  """
  No related `UserEmail` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: UserEmailFilter

  """
  Some related `UserEmail` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: UserEmailFilter
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  AVATAR_URL_ASC
  AVATAR_URL_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  IS_ADMIN_ASC
  IS_ADMIN_DESC
  IS_VERIFIED_ASC
  IS_VERIFIED_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USERNAME_ASC
  USERNAME_DESC
}

"""All input for the `verifyEmail` mutation."""
input VerifyEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  token: String!
  userEmailId: UUID!
}

"""The output of our `verifyEmail` mutation."""
type VerifyEmailPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}
